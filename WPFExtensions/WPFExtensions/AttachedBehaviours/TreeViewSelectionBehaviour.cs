using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Diagnostics;
using WPFExtensions.Helpers;

namespace WPFExtensions.AttachedBehaviours
{
	[DebuggerNonUserCode]
	public class TreeViewSelectionBehaviour : FrameworkElementAttachedBehaviourBase<TreeView>
	{
		#region Attached Dependency Properties



		public static bool GetAutomaticBringIntoViewSelectedItem( DependencyObject obj )
		{
			return (bool)obj.GetValue( AutomaticBringIntoViewSelectedItemProperty );
		}

		public static void SetAutomaticBringIntoViewSelectedItem( DependencyObject obj, bool value )
		{
			obj.SetValue( AutomaticBringIntoViewSelectedItemProperty, value );
		}

		// Using a DependencyProperty as the backing store for AutomaticBringIntoViewSelectedItem.  This enables animation, styling, binding, etc...
		public static readonly DependencyProperty AutomaticBringIntoViewSelectedItemProperty =
			DependencyProperty.RegisterAttached( "AutomaticBringIntoViewSelectedItem", typeof( bool ), typeof( TreeViewSelectionBehaviour ), new UIPropertyMetadata( false, AutomaticBringIntoViewSelectedItem_PropertyChanged ) );

		private static void AutomaticBringIntoViewSelectedItem_PropertyChanged( DependencyObject d, DependencyPropertyChangedEventArgs e )
		{
			var treeView = d as TreeView;
			if ( treeView == null )
				return;

			if ( GetAutomaticBringIntoViewSelectedItem( treeView ) )
				Attach<TreeViewSelectionBehaviour>( treeView );
			else
				Detach<TreeViewSelectionBehaviour>( treeView );
		}


		//[AttachedPropertyBrowsableForType( typeof( TreeView ) )]
		//public static bool GetManageSelection( DependencyObject obj )
		//{
		//    return (bool)obj.GetValue( ManageSelectionProperty );
		//}

		//public static void SetManageSelection( DependencyObject obj, bool value )
		//{
		//    obj.SetValue( ManageSelectionProperty, value );
		//}

		//// Using a DependencyProperty as the backing store for ManagedSelection.  This enables animation, styling, binding, etc...
		//public static readonly DependencyProperty ManageSelectionProperty =
		//    DependencyProperty.RegisterAttached( "ManageSelection", typeof( bool ), typeof( TreeViewSelectionBehaviour ), new UIPropertyMetadata( false, ManageSelection_PropertyChanged ) );

		//private static void ManageSelection_PropertyChanged( DependencyObject obj, DependencyPropertyChangedEventArgs e )
		//{
		//    var treeView = obj as TreeView;
		//    if ( treeView == null )
		//        return;

		//    var manageSelection = (bool)e.NewValue;

		//    if ( manageSelection )
		//        Attach<TreeViewSelectionBehaviour>( treeView );
		//    else
		//        Detach<TreeViewSelectionBehaviour>( treeView );
		//}


		//public static IEnumerable<object> GetSelectedItemRoute( DependencyObject obj )
		//{
		//    return (IEnumerable<object>)obj.GetValue( SelectedItemRouteProperty );
		//}

		//public static void SetSelectedItemRoute( DependencyObject obj, IEnumerable<object> value )
		//{
		//    obj.SetValue( SelectedItemRouteProperty, value );
		//}

		//// Using a DependencyProperty as the backing store for SelectedItemRoute.  This enables animation, styling, binding, etc...
		//public static readonly DependencyProperty SelectedItemRouteProperty =
		//    DependencyProperty.RegisterAttached( "SelectedItemRoute", typeof( IEnumerable<object> ), typeof( TreeViewSelectionBehaviour ), new UIPropertyMetadata( null, SelectedItemRoute_PropertyChanged ) );

		//private static void SelectedItemRoute_PropertyChanged( DependencyObject obj, DependencyPropertyChangedEventArgs e )
		//{
		//    var treeView = obj as TreeView;
		//    if ( treeView == null )
		//        return;

		//    var helper = Get<TreeViewSelectionBehaviour>( treeView );
		//    if ( helper == null || helper.denySelectedItemChange )
		//        return;

		//    //expand the TreeView and set the according TreeViewItem's IsSelected property to 'True'
		//    var nodeRoute = e.NewValue as IEnumerable<object>;
		//    helper.ChangeRoute( nodeRoute );
		//}
		#endregion

		//private bool denySelectedItemChange = false;

		public TreeViewSelectionBehaviour( TreeView treeView )
			: base( treeView )
		{
		}

		protected override void OnAttach()
		{
			Element.SelectedItemChanged += SelectedItemChanged;
		}

		protected override void OnDetach()
		{
			Element.SelectedItemChanged -= SelectedItemChanged;
		}

		private void SelectedItemChanged( object sender, RoutedPropertyChangedEventArgs<object> e )
		{
			Debug.Assert( Element == sender, "The SelectedItemChanged event wasn't generated by the attached TreeView!" );

			if ( GetAutomaticBringIntoViewSelectedItem( Element ) )
			{
				var selectedTreeViewItem = Element.FindTreeViewItemFor( Element.SelectedItem );
				if ( selectedTreeViewItem != null )
					selectedTreeViewItem.BringIntoView();
			}
		}
	}
}
